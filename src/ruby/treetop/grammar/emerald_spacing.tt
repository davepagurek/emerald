grammar Emerald
  include Tokens

  rule top
    &{|s| @indents = [-1] }
    nested_blocks
    {
      def inspect
        nested_blocks.inspect
      end
    }
  end

  rule nested_blocks
    (
      !{|s|
        save = index; i = _nt_indentation; index = save
        closing = i.text_value.length <= @indents.last
      }
      block
    )*
    {
      def inspect
        elements.map{|e| e.block.inspect}*"\n"
      end
    }
  end

 rule block
    indented_line
    &{|s|
      level = s[0].indentation.text_value.length/2
      @indents << level
      true
    }
    nested_blocks
    &{|s|
      @indents.pop
      true
    }
    {
      def inspect
        "<#{indented_line.inspect}>" +
          (nested_blocks.elements.size > 0 ? (
            "\n" +
            nested_blocks.elements.map { |content|
              content.block.inspect
            }.join("\n")
          )
          : "") +
          "</#{indented_line.inspect}>\n"
      end
    }
  end

  rule indented_line
    indentation tag newline+
    {
      def inspect
        tag.text_value
      end
    }
  end

  rule indentation
    (space space)*
  end
end
